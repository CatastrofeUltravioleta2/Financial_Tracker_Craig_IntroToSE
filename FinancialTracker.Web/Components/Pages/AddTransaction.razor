@page "/AddTransaction/{Username}"
@inject NavigationManager navManager

<PageTitle>Home</PageTitle>
<header>
    <h1>Personal Financial Tracker</h1>
    <nav>
        <a href="">Home</a>
        <a href="">Budget</a>
        <a href="">Summary/Comparison</a>
    </nav>
</header>

<body>
    <h1>@(Id == Guid.Empty? "Add A new Transaction" : "Edit Transaction")</h1>
    <div id="AddTransactionDiv">
        <div class="addTransactionFieldDiv">
            <label for="Name">Transaction Name:</label>
            <input id="Name" @bind=CurrentTransaction.Name />
        </div>
        <div class="addTransactionFieldDiv">
            <label for="Amount">Amount:</label>
            <input id="Amount" @bind="CurrentTransaction.Amount" />
        </div>
        <div class="addTransactionFieldDiv">
            <label for="Date">Date:</label>
            <input type="date"id="Date" @bind="CurrentTransaction.Date" readonly/>
        </div>
        <div class="addTransactionFieldDiv">
            <label for="Category">Category:</label>
            <select id="Category" @bind="CurrentTransaction.Category">
                <option value="" hidden></option>
                <option value="Housing">Housing And Utilities</option>
                <option value="Food">Food</option>
                <option value="Transportation">Transportation</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Bills">Bills and Financial</option>
                <option value="Miscellaneous">Miscellaneous</option>
            </select>
        </div>
        <div class="addTransactionFieldDiv">
            <label for="Notes">Notes:</label>
            <textarea id="Notes" @bind="CurrentTransaction.Notes" />
        </div>

        <div id="AddSaveTransactionButtons">
            <button @onclick="AddSaveTransaction">@(Id == Guid.Empty ? "Add Transaction" : "Save Changes")</button>
            @if(Id != Guid.Empty)
            {
                <button @onclick="DeleteTransaction">Delete Transaction</button>
            }
            <button @onclick="CancelAddTransaction">Cancel</button>
            <p id="AddTransactionErrorMessage">@erroMessage</p>
        </div>
    </div>
</body>

@code {
    [Parameter]
    public string Username { get; set; }
    [SupplyParameterFromQuery]
    public Guid Id { get; set; }
    private Transaction CurrentTransaction;
    private string erroMessage;
    public static SQLTransactionData TransactionDataManager = new SQLTransactionData();
    Dictionary<Guid, (string Owner, string Name, decimal Amount, DateTime Date, string Category, string Notes)>? TransactionDB;
     public TransactionBook transactionBook = new TransactionBook();

    protected override void OnInitialized()
    {
        TransactionDB = TransactionDataManager.GetTransactionByUser(Username);
        foreach (var transaction in TransactionDB)
        {
            transactionBook.AddTransaction(new Transaction(transaction.Key, transaction.Value.Owner, transaction.Value.Name, transaction.Value.Amount, transaction.Value.Date, transaction.Value.Category, transaction.Value.Notes));
        }
        if (Id != Guid.Empty)
        {
            var transactionData = TransactionDB[Id];
            CurrentTransaction = new Transaction(Id, transactionData.Owner, transactionData.Name, transactionData.Amount, transactionData.Date, transactionData.Category, transactionData.Notes);
        }
        else
        {
            CurrentTransaction = new Transaction(Guid.NewGuid(), Username, "", 0, DateTime.Now, "", "");
            Console.WriteLine(CurrentTransaction.TransactionId);
        }
    }
    private void CancelAddTransaction()
    {
        navManager.NavigateTo($"/Home/{Username}");
    }

    private void AddSaveTransaction()
    {
        if (CurrentTransaction.Name == "" || CurrentTransaction.Amount == 0 || CurrentTransaction.Category == "")
        {
            erroMessage = "Please fill out all required fields";
        }
        else
        {  
            if(Id==Guid.Empty)
            {
                transactionBook.AddTransaction(CurrentTransaction);
            }
            else
            {
                
                int transactionIndexOnBook = transactionBook.ListTransactions().FindIndex(t => t.TransactionId == Id);
                foreach(Transaction t in transactionBook.ListTransactions())
                {
                    Console.WriteLine("Transaction in Book:");
                    Console.WriteLine(t.TransactionId);
                }
                transactionBook.UpdateTransaction(transactionIndexOnBook, CurrentTransaction);
            }

            TransactionDataManager.SaveTransactionData(transactionBook.ListTransactions().ToDictionary(t => t.TransactionId, t => (t.TransactionOwner, t.Name, t.Amount, t.Date, t.Category, t.Notes)));
            navManager.NavigateTo($"/Home/{Username}");
        }
    }
    private void DeleteTransaction()
    {
        if (Id != Guid.Empty)
        {
            int transactionIndexOnBook = transactionBook.ListTransactions().FindIndex(t => t.TransactionId == Id);
            transactionBook.RemoveTransaction(transactionIndexOnBook);
            TransactionDataManager.DeleteTransaction(Id);
        }
        navManager.NavigateTo($"/Home/{Username}");
    }
}