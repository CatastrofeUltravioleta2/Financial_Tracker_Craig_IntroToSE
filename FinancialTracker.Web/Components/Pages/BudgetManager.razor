@page "/BudgetManager/{Username}"
<link href="Styles/BudgetManager.css" rel="stylesheet" />
@inject NavigationManager navManager

<style>
    :root {
        --p1: #402E7A;
        --p2: #4C3BCF;
        --p3: #4B70F5;
        --accent: #3DC2EC;
        --bg: #070712;
        --card-bg: #0D1230;
        --text: #EAF4FF;
        --muted: #B8C7F5;
        --danger: #FF6B6B;
        --radius: 12px;
        --input-border: rgba(255, 255, 255, 0.04);
    }

    *,
    *::before,
    *::after {
        box-sizing: border-box;
    }

    html,
    body {
        height: 100%;
        margin: 0;
        background: var(--bg);
        color: var(--text);
        font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }

    header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 980px;
        margin: 18px auto 0;
        padding: 8px 12px;
    }

    header h1 {
        margin: 0;
        font-size: 1.1rem;
        font-weight: 800;
        color: var(--text);
    }

    header nav {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    header nav a {
        color: var(--muted);
        text-decoration: none;
        padding: 8px 12px;
        border-radius: 8px;
        transition: background .12s ease, color .12s ease, transform .08s ease;
        border: 1px solid transparent;
        font-weight: 700;
        display: inline-block;
    }

    header nav a:hover {
        background: rgba(76, 59, 207, 0.07);
        color: var(--text);
        border-color: rgba(76, 59, 207, 0.12);
        transform: translateY(-1px);
    }

    header nav a.active,
    header nav a[aria-current="page"] {
        background: linear-gradient(90deg, var(--p2), var(--p3));
        color: white;
        box-shadow: 0 8px 30px rgba(76, 59, 207, 0.12);
    }

    #BudgetContainer {
        max-width: 980px;
        margin: 28px auto;
        display: flex;
        flex-direction: column;
        gap: 18px;
        padding: 12px;
    }


    header,
    nav {
        z-index: 90;
        position: relative;
    }

    #BudgetContainer {
        max-width: 980px;
        margin: 28px auto;
        display: flex;
        flex-direction: column;
        gap: 18px;
        padding: 12px;
    }

    #MainBudgetSetupDiv {
        display: flex;
        flex-direction: column;
        gap: 12px;
        background: var(--card-bg);
        border-radius: var(--radius);
        padding: 16px;
        border: 1px solid rgba(76, 59, 207, 0.10);
        width: 100%;
    }

    .field {
        display: flex;
        flex-direction: column;
        gap: 6px;
        width: 100%;
    }

    .field label {
        color: var(--p2);
        font-weight: 700;
    }

    .field input[type="number"],
    .field input[type="date"],
    .field select {
        width: 100%;
        padding: 10px;
        border-radius: 10px;
        border: 1px solid var(--input-border);
        background: transparent;
        color: var(--text);
        font-size: 0.96rem;
    }

    .actions {
        display: flex;
        gap: 10px;
        align-items: center;
        justify-content: flex-start;
        margin-top: 6px;
    }

    .actions button {
        padding: 10px 14px;
        border-radius: 10px;
        border: none;
        background: var(--p2);
        color: white;
        font-weight: 700;
        cursor: pointer;
    }


    .MainBudgetinfo {
        width: 100%;
        background: var(--card-bg);
        border-radius: 10px;
        padding: 14px;
        border: 1px solid rgba(75, 112, 245, 0.06);
    }

    .MainBudgetinfo p {
        margin: 6px 0;
    }

    #SubBudgetsDiv {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-top: 6px;
    }

    #SubbudgetCards {
        display: flex;
        flex-direction: column;
        gap: 12px;
        width: 100%;
    }

    .SubbudgetCard {
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 10px;
        padding: 12px;
        border-radius: 10px;
        background: var(--card-bg);
        border: 1px solid rgba(60, 194, 236, 0.06);
    }

    .SubbudgetCard .left,
    .SubbudgetCard .right {
        width: 100%;
        display: block;
    }

    .SubbudgetCard input[type="number"],
    .SubbudgetCard input[type="text"],
    .SubbudgetCard select {
        width: 100%;
        padding: 10px;
        border-radius: 8px;
        border: 1px solid var(--input-border);
        background: transparent;
        color: var(--text);
    }

    .SubbudgetCard .metrics {
        display: flex;
        flex-direction: row;
        gap: 12px;
        flex-wrap: wrap;
        align-items: center;
    }

    .SubbudgetCard .metrics p {
        margin: 0;
        font-size: 0.95rem;
        color: var(--muted);
    }

    .SubbudgetCard .svg {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .warn {
        color: var(--danger);
        font-weight: 800;
    }

    .good {
        color: #5CE5A1;
        font-weight: 700;
    }

    .error {
        color: var(--danger);
        font-weight: 800;
    }

    .footer-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-start;
        margin-top: 6px;
    }

      .footer-actions {
      display: flex;
      gap: 10px;
      justify-content: flex-start;
      margin-top: 6px;
  }

  .footer-actions button,
  #SetUpSubBudgets {
      padding: 10px 12px;
      border-radius: 10px;
      border: none;
      background: var(--p3);
      color: white;
      font-weight: 700;
      cursor: pointer;
  }
    header,
    nav {
        z-index: 90;
        position: relative;
    }
</style>


<PageTitle>Budgets</PageTitle>

<header>
    <h1>Personal Financial Tracker</h1>
    <nav>
        <a href="@($"/Home/{Username}")">Home</a>
        <a href="@($"/BudgetManager/{Username}")">Budget</a>
        <a href="">Summary/Comparison</a>
    </nav>
</header>

<body>
    <h1>Budgets</h1>
    <div id="BudgetContainer">
        @* <div id="SelectBudgetModeDiv">
            <h2>Select Budget Setup</h2>
            <div>
                <label>
                    <input type="radio" @bind="CurrentBudget.Mode" name='BudgetMode' /> Monthly
                </label>
                <label>
                    <input type="radio" @bind="CurrentBudget.Mode" name='BudgetMode' /> Yearly
                </label>
                <label>
                    <input type="radio" @bind="CurrentBudget.Mode" name='BudgetMode' /> Custom
                </label>
            </div>
        </div> *@
        <div id="MainBudgetSetupDiv">

            <div class="field">
                <label>Declared Income for Period</label>
                <input type="number" step="0.01" @bind="CurrentBudget.DeclaredIncomeForPeriod" />
            </div>

            @* @if (CurrentBudget.Mode == BudgetMode.Custom)
            {
                <div class="field">
                    <label>Start Date</label>
                    <input type="date" @bind="CurrentBudget.PeriodStart" />
                </div>
                <div class="field">
                    <label>End Date</label>
                    <input type="date" @bind="CurrentBudget.PeriodEnd" />
                </div>
            } *@

            <div class="actions">
                <button @onclick="CreateOrApplyMainBudget">Set Main Budget</button>
            </div>
            @if (CurrentBudget.Id != Guid.Empty)
            {
                <div class="MainBudgetinfo">
                    <p>Current Budget Mode: <strong>@CurrentBudget.Mode.ToString()</strong></p>
                    <p>Owner: @CurrentBudget.Owner</p>
                    <p>Period: @CurrentBudget.PeriodStart.ToShortDateString() â€” @CurrentBudget.PeriodEnd.ToShortDateString()
                        (@CurrentBudget.DaysInPeriod days)</p>
                    <p>Total Amount: @CurrentBudget.TotalAmount.ToString("C")</p>
                    <p>Declared Income for Period: @CurrentBudget.DeclaredIncomeForPeriod.ToString("C")</p>
                    @{
                        var mainRemaining = CurrentBudget.DeclaredIncomeForPeriod - CurrentBudget.TotalAmount;
                        var mainPct = CurrentBudget.DeclaredIncomeForPeriod == 0 ? 0 : Math.Round((double)(mainRemaining /
                        CurrentBudget.DeclaredIncomeForPeriod * 100), 2);
                    }
                    <p>Budget Remaining: @mainRemaining.ToString("C") (@mainPct%)</p>
                </div>
            }

            <div id="SubBudgetsDiv">
                <h2>Sub Budgets</h2>
                <div id="SubbudgetCards">
                    <div id="HousingBudget" class="SubbudgetCard">
                        <h3>Housing and Utilities</h3>
                        @if (CurrentBudget.SubBudgets[0].Id != Guid.Empty)
                        {
                            var sb = CurrentBudget.SubBudgets[0];
                            var sbRemaining = sb.IncomeShare - sb.Amount;
                            var sbPct = sb.IncomeShare == 0 ? 0 : Math.Round((double)(sbRemaining / sb.IncomeShare * 100),
                            2);
                            <p>Amount: @sb.Amount.ToString("C")</p>
                            <p>Income Assigned to Sub budget: @sb.IncomeShare.ToString("C")</p>
                            <p>Budget Remaining: @sbRemaining.ToString("C") (@sbPct%)</p>
                            <p>Transactions in this Sub budget: @transactionBook.ListTransactions().Where(t => t.Category ==
                                                            "Housing").Count()</p>
                                                }
                        <input type="number" step="0.01" id="AddIncomeForHousingBudget"
                            placeholder="Assign Income to subbudget" @bind="CurrentBudget.SubBudgets[0].IncomeShare" />
                    </div>
                    <div id="FoodBudget" class="SubbudgetCard">
                        <h3>Food and Groceries</h3>
                        @if (CurrentBudget.SubBudgets[1].Id != Guid.Empty)
                        {
                            var sb = CurrentBudget.SubBudgets[1];
                            var sbRemaining = sb.IncomeShare - sb.Amount;
                            var sbPct = sb.IncomeShare == 0 ? 0 : Math.Round((double)(sbRemaining / sb.IncomeShare * 100),
                            2);
                            <p>Amount: @sb.Amount.ToString("C")</p>
                            <p>Income Assigned to Sub budget: @sb.IncomeShare.ToString("C")</p>
                            <p>Budget Remaining: @sbRemaining.ToString("C") (@sbPct%)</p>
                            <p>Transactions in this Sub budget: @transactionBook.ListTransactions().Where(t => t.Category ==
                                                            "Food").Count()</p>
                                                }
                        <input type="number" step="0.01" id="AddIncomeForFoodBudget"
                            placeholder="Assign Income to subbudget" @bind="CurrentBudget.SubBudgets[1].IncomeShare" />
                    </div>
                    <div id="TransportationBudget" class="SubbudgetCard">
                        <h3>Transportation</h3>
                        @if (CurrentBudget.SubBudgets[2].Id != Guid.Empty)
                        {
                            var sb = CurrentBudget.SubBudgets[2];
                            var sbRemaining = sb.IncomeShare - sb.Amount;
                            var sbPct = sb.IncomeShare == 0 ? 0 : Math.Round((double)(sbRemaining / sb.IncomeShare * 100),
                            2);
                            <p>Amount: @sb.Amount.ToString("C")</p>
                            <p>Income Assigned to Sub budget: @sb.IncomeShare.ToString("C")</p>
                            <p>Budget Remaining: @sbRemaining.ToString("C") (@sbPct%)</p>
                            <p>Transactions in this Sub budget: @transactionBook.ListTransactions().Where(t => t.Category ==
                                                            "Transportation").Count()</p>
                                                }
                        <input type="number" step="0.01" id="AddIncomeForTransportationBudget"
                            placeholder="Assign Income to subbudget" @bind="CurrentBudget.SubBudgets[2].IncomeShare" />
                    </div>
                    <div id="EntertainmentBudget" class="SubbudgetCard">
                        <h3>Entertainment</h3>
                        @if (CurrentBudget.SubBudgets[3].Id != Guid.Empty)
                        {
                            var sb = CurrentBudget.SubBudgets[3];
                            var sbRemaining = sb.IncomeShare - sb.Amount;
                            var sbPct = sb.IncomeShare == 0 ? 0 : Math.Round((double)(sbRemaining / sb.IncomeShare * 100),
                            2);
                            <p>Amount: @sb.Amount.ToString("C")</p>
                            <p>Income Assigned to Sub budget: @sb.IncomeShare.ToString("C")</p>
                            <p>Budget Remaining: @sbRemaining.ToString("C") (@sbPct%)</p>
                            <p>Transactions in this Sub budget: @transactionBook.ListTransactions().Where(t => t.Category ==
                                                            "Entertainment").Count()</p>
                                                }
                        <input type="number" step="0.01" id="AddIncomeForEntertainmentBudget"
                            placeholder="Assign Income to subbudget" @bind="CurrentBudget.SubBudgets[3].IncomeShare" />
                    </div>
                    <div id="BillsBudget" class="SubbudgetCard">
                        <h3>Bills and Finances</h3>
                        @if (CurrentBudget.SubBudgets[4].Id != Guid.Empty)
                        {
                            var sb = CurrentBudget.SubBudgets[4];
                            var sbRemaining = sb.IncomeShare - sb.Amount;
                            var sbPct = sb.IncomeShare == 0 ? 0 : Math.Round((double)(sbRemaining / sb.IncomeShare * 100),
                            2);
                            <p>Amount: @sb.Amount.ToString("C")</p>
                            <p>Income Assigned to Sub budget: @sb.IncomeShare.ToString("C")</p>
                            <p>Budget Remaining: @sbRemaining.ToString("C") (@sbPct%)</p>
                            <p>Transactions in this Sub budget: @transactionBook.ListTransactions().Where(t => t.Category ==
                                                            "Bills").Count()</p>
                                                }
                        <input type="number" step="0.01" id="AddIncomeForBillsBudget"
                            placeholder="Assign Income to subbudget" @bind="CurrentBudget.SubBudgets[4].IncomeShare" />
                    </div>
                    <div id="MiscellaneousBudget" class="SubbudgetCard">
                        <h3>Miscellaneous</h3>
                        @if (CurrentBudget.SubBudgets[5].Id != Guid.Empty)
                        {
                            var sb = CurrentBudget.SubBudgets[5];
                            var sbRemaining = sb.IncomeShare - sb.Amount;
                            var sbPct = sb.IncomeShare == 0 ? 0 : Math.Round((double)(sbRemaining / sb.IncomeShare * 100),
                            2);
                            <p>Amount: @sb.Amount.ToString("C")</p>
                            <p>Income Assigned to Sub budget: @sb.IncomeShare.ToString("C")</p>
                            <p>Budget Remaining: @sbRemaining.ToString("C") (@sbPct%)</p>
                            <p>Transactions in this Sub budget: @transactionBook.ListTransactions().Where(t => t.Category ==
                                                            "Miscellaneous").Count()</p>
                                                }
                        <input type="number" step="0.01" id="AddIncomeForMiscellaneousBudget"
                            placeholder="Assign Income to subbudget" @bind="CurrentBudget.SubBudgets[5].IncomeShare" />
                    </div>
                </div>
                <p>@SubBudgetError</p>
                <button @onclick="SetUpSubBudgets" id="SetUpSubBudgets">Set Up Sub budgets</button>
            </div>

        </div>
    </div>
</body>


@code {
    [Parameter]
    public string Username { get; set; }
    public static SQLTransactionData TransactionDataManager = new SQLTransactionData();
    public static SQLBudgetData BudgetDataManager = new SQLBudgetData();
    public static SQLSubBudgetData SubBudgetDataManager = new SQLSubBudgetData();
    private TransactionBook transactionBook = new TransactionBook();
    Dictionary<Guid, (string Owner, string Name, decimal Amount, DateTime Date, string Category, string Notes)>?
    TransactionDB;
    Dictionary<Guid, (string, string, decimal, decimal, DateTime, DateTime)>? UserBudgetDB;
    Dictionary<Guid, (Guid, string, decimal, decimal)>? UserSubBudgetDB;
    string SubBudgetError = "";

    private BudgetManagerEdition budgetManager;
    private Budget CurrentBudget { get; set; } = new Budget();
    private List<SubBudget> Subbudgets => CurrentBudget?.SubBudgets ?? new List<SubBudget>();

    protected override void OnInitialized()
    {
        TransactionDB = TransactionDataManager.GetTransactionByUser(Username);
        foreach (var transaction in TransactionDB)
        {
            transactionBook.AddTransaction(new Transaction(transaction.Key, transaction.Value.Owner, transaction.Value.Name,
            transaction.Value.Amount, transaction.Value.Date, transaction.Value.Category, transaction.Value.Notes));
        }
        UserBudgetDB = BudgetDataManager.GetBudgetByUser(Username);
        if (UserBudgetDB.Count > 0)
        {
            var currentBudgetDB = UserBudgetDB.First();
            CurrentBudget = new Budget()
            {
                Id = currentBudgetDB.Key,
                Owner = currentBudgetDB.Value.Item1,
                Mode = Enum.Parse<BudgetMode>(currentBudgetDB.Value.Item2),
                TotalAmount = currentBudgetDB.Value.Item3,
                DeclaredIncomeForPeriod = currentBudgetDB.Value.Item4,
                PeriodStart = currentBudgetDB.Value.Item5,
                PeriodEnd = currentBudgetDB.Value.Item6,
                SubBudgets = new List<SubBudget>()

            };
            UserSubBudgetDB = SubBudgetDataManager.GetSubBudgetByParentId(Guid.Empty);
            var subBudgetsDB = SubBudgetDataManager.GetSubBudgetByParentId(CurrentBudget.Id);
            if (subBudgetsDB.Count == 0)
            {
                CurrentBudget.SubBudgets.Add(new SubBudget()
                {
                    Id = Guid.Empty,
                    ParentId = CurrentBudget.Id,
                    Category = "Housing",
                    Amount = 0,
                    IncomeShare = 0
                });
                CurrentBudget.SubBudgets.Add(new SubBudget()
                {
                    Id = Guid.Empty,
                    ParentId = CurrentBudget.Id,
                    Category = "Food",
                    Amount = 0,
                    IncomeShare = 0
                });
                CurrentBudget.SubBudgets.Add(new SubBudget()
                {
                    Id = Guid.Empty,
                    ParentId = CurrentBudget.Id,
                    Category = "Transportation",
                    Amount = 0,
                    IncomeShare = 0
                });
                CurrentBudget.SubBudgets.Add(new SubBudget()
                {
                    Id = Guid.Empty,
                    ParentId = CurrentBudget.Id,
                    Category = "Entertainment",
                    Amount = 0,
                    IncomeShare = 0
                });
                CurrentBudget.SubBudgets.Add(new SubBudget()
                {
                    Id = Guid.Empty,
                    ParentId = CurrentBudget.Id,
                    Category = "Bills",
                    Amount = 0,
                    IncomeShare = 0
                });
                CurrentBudget.SubBudgets.Add(new SubBudget()
                {
                    Id = Guid.Empty,
                    ParentId = CurrentBudget.Id,
                    Category = "Miscellaneous",
                    Amount = 0,
                    IncomeShare = 0
                });
            }
            else
            {
                foreach (var subBudget in subBudgetsDB)
                {
                    CurrentBudget.SubBudgets.Add(new SubBudget()
                    {
                        Id = subBudget.Key,
                        ParentId = subBudget.Value.Item1,
                        Category = subBudget.Value.Item2,
                        Amount = subBudget.Value.Item3,
                        IncomeShare = subBudget.Value.Item4
                    });
                }
            }
        }
        else
        {
            CurrentBudget = new Budget()
            {
                Id = Guid.Empty,
                Owner = Username,
                Mode = BudgetMode.Monthly,
                TotalAmount = 0,
                DeclaredIncomeForPeriod = 0,
                PeriodStart = DateTime.Now,
                PeriodEnd = DateTime.Now.AddMonths(1),
                SubBudgets = new List<SubBudget>()
            };
            CurrentBudget.SubBudgets.Add(new SubBudget()
            {
                Id = Guid.Empty,
                ParentId = CurrentBudget.Id,
                Category = "Housing",
                Amount = 0,
                IncomeShare = 0
            });
            CurrentBudget.SubBudgets.Add(new SubBudget()
            {
                Id = Guid.Empty,
                ParentId = CurrentBudget.Id,
                Category = "Food",
                Amount =
            0,
                IncomeShare = 0
            });
            CurrentBudget.SubBudgets.Add(new SubBudget()
            {
                Id = Guid.Empty,
                ParentId = CurrentBudget.Id,
                Category =
            "Transportation",
                Amount = 0,
                IncomeShare = 0
            });
            CurrentBudget.SubBudgets.Add(new SubBudget()
            {
                Id = Guid.Empty,
                ParentId = CurrentBudget.Id,
                Category = "Entertainment",
                Amount = 0,
                IncomeShare = 0
            });
            CurrentBudget.SubBudgets.Add(new SubBudget()
            {
                Id = Guid.Empty,
                ParentId = CurrentBudget.Id,
                Category = "Bills",
                Amount
            = 0,
                IncomeShare = 0
            });
            CurrentBudget.SubBudgets.Add(new SubBudget()
            {
                Id = Guid.Empty,
                ParentId = CurrentBudget.Id,
                Category = "Miscellaneous",
                Amount = 0,
                IncomeShare = 0
            });
        }
        budgetManager = new BudgetManagerEdition();
        CurrentBudget.TotalAmount = budgetManager.GetMainSpent(CurrentBudget, transactionBook);
        foreach (var subBudget in CurrentBudget.SubBudgets)
        {
            subBudget.Amount = budgetManager.GetSubBudgetSpent(CurrentBudget, subBudget, transactionBook);
        }

    }
    private void CreateOrApplyMainBudget()
    {
        if (CurrentBudget.Id == Guid.Empty)
        {
            Guid newBudgetId = Guid.NewGuid();
            CurrentBudget.Id = newBudgetId;
            UserBudgetDB[newBudgetId] = (CurrentBudget.Owner, CurrentBudget.Mode.ToString(), CurrentBudget.TotalAmount,
            CurrentBudget.DeclaredIncomeForPeriod, CurrentBudget.PeriodStart, CurrentBudget.PeriodEnd);
            BudgetDataManager.SaveBudgetData(UserBudgetDB);

        }
        else
        {
            UserBudgetDB[CurrentBudget.Id] = (CurrentBudget.Owner, CurrentBudget.Mode.ToString(), CurrentBudget.TotalAmount,
            CurrentBudget.DeclaredIncomeForPeriod, CurrentBudget.PeriodStart, CurrentBudget.PeriodEnd);
            BudgetDataManager.SaveBudgetData(UserBudgetDB);
        }
    }

    private void SetUpSubBudgets()
    {
        int subBudgetSumIncome = CurrentBudget.SubBudgets.Sum(sb => (int)sb.IncomeShare);
        if (subBudgetSumIncome > CurrentBudget.DeclaredIncomeForPeriod)
        {
            SubBudgetError = "The total income assigned to sub budgets exceeds the declared income for the period.";
            StateHasChanged();
            return;
        }

        SubBudgetError = "";
        foreach (var subBudget in CurrentBudget.SubBudgets.Where(sb => sb.IncomeShare > 0))
        {
            if (subBudget.Id == Guid.Empty)
            {
                Guid newSubBudgetId = Guid.NewGuid();
                subBudget.Id = newSubBudgetId;
                UserSubBudgetDB[newSubBudgetId] = (CurrentBudget.Id, subBudget.Category, subBudget.Amount, subBudget.IncomeShare);
            }
            else
            {
                UserSubBudgetDB[subBudget.Id] = (CurrentBudget.Id, subBudget.Category, subBudget.Amount, subBudget.IncomeShare);
            }
        }
        SubBudgetDataManager.SaveSubBudgetData(UserSubBudgetDB);
    }
}
;