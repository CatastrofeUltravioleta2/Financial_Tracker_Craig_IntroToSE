@page "/Home/{Username}"
@inject NavigationManager navManager

<style>
  /* Home page styles — always dark */
  :root{
    --p1:#402E7A;
    --p2:#4C3BCF;
    --p3:#4B70F5;
    --accent:#3DC2EC;
    --bg:#070712;
    --card-bg:#0C0F28;
    --text:#EAF4FF;
    --muted:#B9C8F6;
    --radius:12px;
    --input-border: rgba(255,255,255,0.12); /* increased visibility */
  }

  html, body { height:100%; margin:0; background-color:var(--bg); color:var(--text); font-family:Inter,system-ui; }

  #TransactionMainPage {
    max-width:1100px;
    margin: 28px auto;
    text-align:center;
    padding:20px;
    border-radius:var(--radius);
    background: var(--card-bg);
    border: 1px solid rgba(76,59,207,0.10);
  }

  #TransactionFilterDiv {
    max-width:1100px;
    margin:18px auto;
    display:flex;
    gap:12px;
    align-items:center;
    justify-content:space-between;
    flex-wrap:wrap;
    padding:10px;
  }

  #TransactionFilterDiv > div {
    background:transparent;
    padding:10px;
    border-radius:10px;
    border:1px solid var(--input-border);
    min-width:160px;
  }

  /* Make inputs more visible with clear border */
  #TransactionFilterDiv input[type="date"],
  #TransactionFilterDiv input[type="text"],
  #TransactionFilterDiv input[type="number"],
  #TransactionFilterDiv select {
    padding:8px 10px;
    border-radius:8px;
    border:1px solid var(--input-border);
    background: transparent;
    color:var(--text);
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
  }

  /* Style the select dropdown options to match dark theme */
  #TransactionFilterDiv select option {
    background: var(--card-bg);
    color: var(--text);
  }

  /* Improve focus state */
  #TransactionFilterDiv input:focus, #TransactionFilterDiv select:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(76,59,207,0.06);
  }

  #TransactionDiv { max-width:1100px; margin:18px auto; display:flex; flex-direction:column; gap:12px; padding: 6px; }

  .TransactionCard {
    background: var(--card-bg);
    padding:12px;
    border-radius:12px;
    display:flex;
    flex-direction:column;
    gap:6px;
    border: 1px solid rgba(60,194,236,0.06);
    cursor:pointer;
  }

  #TotalAmount { text-align:right; font-weight:800; color:var(--p3); }

  button {
    padding:10px 12px;
    border-radius:10px;
    border:none;
    background-color: var(--p3);
    color:white;
    font-weight:700;
    cursor:pointer;
  }

</style>

<PageTitle>Home</PageTitle>
<header>
    <h1>Personal Financial Tracker</h1>
    <nav>
        <a href="@($"/Home/{Username}")">Home</a>
        <a href="@($"/BudgetManager/{Username}")">Budget</a>
        <a href="">Summary/Comparison</a>
    </nav>
</header>

<body>
    <div id="TransactionMainPage">
        <h2>Welcome to the Personal Financial Tracker</h2>
        <p>This application helps you manage your personal finances by tracking your income, expenses, and budgets.</p>
    </div>
    <div id="TransactionFilterDiv">
        <div id="FilterByCategoryDiv">
            <label for="FilterByCategory">Filter by Category:</label>
            <select @bind="FilterCriteria.Category" id="FilterByCategory">
                <option value="Housing">Housing And Utilities</option>
                <option value="Food">Food</option>
                <option value="Transportation">Transportation</option>
                <option value="Entertainment">Entertainment</option>
                <option value="Bills">Bills and Financial</option>
                <option value="Income">Income</option>
            </select>
        </div>
        <div id="FilterByDateDiv">
            <label for="FilterByDate">Filter by Date:</label>
            <input @bind="FilterCriteria.Date" type="date" id="FilterByDate" />
        </div>
        <div id="FilterByNameDiv">
            <label for="FilterByName">Filter by Name:</label>
            <input @bind="FilterCriteria.Name" type="text" id="FilterByName" />
        </div>
        <div id="FilterByAmountDiv">
            <label for="FilterByAmount">Filter by Range</label>
            <input @bind="FilterCriteria.AmountLow" type="number" id="FilterByAmountLow" step="0.01" />
            <input @bind="FilterCriteria.AmountHigh" type="number" id="FilterByAmountHigh" step="0.01" />
        </div>
        <div>
            <button @onclick="ApplyFilters" id="ApplyFiltersButton">Apply Filters</button>
            <button @onclick="ClearFilters" id="ClearFiltersButton">Clear Filters</button>
        </div>
    </div>
    <div id="TransactionDiv">
        @if (transactionBook.ListTransactions().Count == 0)
        {
            <p>No transactions found. Please add a transaction.</p>
        }
        else
        {
            <h2>@Username Transactions</h2>
            @foreach (var transaction in DisplayedTransactions)
            {
                <div @onclick="() => EditTransaction(transaction.TransactionId)" class="TransactionCard">
                    <h3>@transaction.Name</h3>
                    <p>Amount: @transaction.Amount.ToString("C")</p>
                    <p>Date: @transaction.Date.ToShortDateString()</p>
                    <p>Category: @transaction.Category</p>
                    <p>Notes: @transaction.Notes</p>
                </div>
            }
            <h2 id="TotalAmount">Total Amount: @transactionBook.TotalAmount</h2>
        }
        <button @onclick="AddTransaction">AddTransaction</button>
    </div>
</body>

@code {
    [Parameter]
    public string Username { get; set; }
    public Dictionary<Guid, (string Owner, string Name, decimal Amount, DateTime Date, string Category, string Notes)>
    TransactionDB = new();
    public static SQLTransactionData TransactionDataManager = new SQLTransactionData();
    public TransactionBook transactionBook = new TransactionBook();
    public List<Transaction> DisplayedTransactions = new List<Transaction>();

    public (string Category, DateTime? Date, string Name, decimal? AmountLow, decimal? AmountHigh) FilterCriteria = ("", null, "", null, null);
    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Username))
        {
            navManager.NavigateTo("/");
        }
        TransactionDB = TransactionDataManager.GetTransactionByUser(Username);
        foreach (var transaction in TransactionDB)
        {
            transactionBook.AddTransaction(new Transaction(transaction.Key, transaction.Value.Owner, transaction.Value.Name,
            transaction.Value.Amount, transaction.Value.Date, transaction.Value.Category, transaction.Value.Notes));
            DisplayedTransactions = transactionBook.ListTransactions();
        }
    }

    private void AddTransaction()
    {
        navManager.NavigateTo($"/AddTransaction/{Username}/?Id={Guid.Empty}");
    }

    private void EditTransaction(Guid TransactionId)
    {
        navManager.NavigateTo($"/AddTransaction/{Username}/?Id={TransactionId}");
    }
    private void ClearFilters()
    {
        FilterCriteria = ("", null, "", null, null);
        DisplayedTransactions = transactionBook.ListTransactions();
    }
    private void ApplyFilters()
    {
        DisplayedTransactions = transactionBook.ListTransactions().Where(t =>
        (string.IsNullOrEmpty(FilterCriteria.Category) || t.Category == FilterCriteria.Category) &&
        (!FilterCriteria.Date.HasValue || t.Date.Date == FilterCriteria.Date.Value.Date) &&
        (string.IsNullOrEmpty(FilterCriteria.Name) || t.Name.Contains(FilterCriteria.Name, StringComparison.OrdinalIgnoreCase)) &&
        (!FilterCriteria.AmountLow.HasValue || t.Amount >= FilterCriteria.AmountLow.Value) &&
        (!FilterCriteria.AmountHigh.HasValue || t.Amount <= FilterCriteria.AmountHigh.Value)
        ).ToList();
        StateHasChanged();
    }
}